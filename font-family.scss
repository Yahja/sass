///
/// @component font-family
///

// @variables

$font-family: 'Roboto';
$font-path: './assets/fonts';
$font-weight: (300, 400, 700);
$font-style: (normal, italic);
$font-format: (ttf);

// @param $src
// @type: string;
// @default null;
@function append-url($src) {
	$url: ();
    	$enable-formats: ( woff: 'woff', otf: 'opentype', ttf: 'truetype', svg: 'svg');

    @each $format in $font-format {
        @if (not map-get($enable-formats, $format)) {
            @error '"#{$format}" is not valid format';
        }

        $append: url(quote($src + '.' + $format)) format(quote(map-get($enable-formats, $format)));
        $url: append($url, $append, comma);
    }

    @return $url;
}

@each $style in $font-style {
    @if($style !=normal and $style !=italic and $style !=oblique) {
        @error '"#{$style}" is not property value for "font-style"';
    }

    @each $weight in $font-weight {

        @if(type-of($weight) !=number) {
            @error '"#{$weight}" is not a number';
        }

	// $family should lower case string set in $font-family,
	// example: "roboto";	    
	$family: to-lower-case($font-family);
	// $src should concatenate coresponding path and file name,
	// example: "./assets/fonts/roboto/roboto-400-normal";
        $src: '#{$font-path}/#{$family}/#{$family}-#{$weight}-#{$style}';

        @font-face {
            font-family: $font-family;
            font-weight: $weight;
            font-style: $style;
		
            @if($font-format == eot) {
                // special case for "eot" format, 
		// if eot is defined in $font-format array, should set resource
		src: url('#{$src}.eot?#iefix') format('embedded-opentype');
            }
            src: append-url($src);
        }
    }
}
